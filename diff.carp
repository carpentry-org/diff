(deftype (Diff a)
  (Eq [a])
  (Insertion [a])
  (Deletion [a])
)

(defmodule Diff
  (defn = [a b]
    (match @a
      (Eq x)
        (match @b
          (Eq y) (= &x &y)
          _ false)
      (Insertion x)
        (match @b
          (Insertion y) (= &x &y)
          _ false)
      (Deletion x)
        (match @b
          (Deletion y) (= &x &y)
          _ false)
    )
  )

  (defn diff [old new]
    (let-do [oidxm {}
             overlap {}
             sso 0
             ssn 0
             sl 0]
      (for [i 0 (Array.length old)]
        (let [e (Array.unsafe-nth old i)
              to-u (Map.get-with-default &oidxm e &[])]
          (set! oidxm (Map.put oidxm e &(Array.push-back to-u i)))))
      (for [inew 0 (Array.length new)]
        (let-do [_overlap {}
                 ol &(Map.get-with-default &oidxm (Array.unsafe-nth new inew) &[])]
          (for [i 0 (Array.length ol)]
            (let-do [iold @(Array.unsafe-nth ol i)]
              (set! _overlap (Map.put _overlap &iold
                                      &(Int.inc (if (/= iold 0)
                                                (Map.get &overlap
                                                         &(Int.dec iold))
                                                iold))))
              (if (> (Map.get &_overlap &iold) sl)
                (do
                  (set! sl (Map.get &_overlap &iold))
                  (set! sso (Int.inc (- iold sl)))
                  (set! ssn (Int.inc (- inew sl))))
                ())))
          (set! overlap _overlap)))
      (if (= 0 sl)
        (let-do [res []]
          (when (> (Array.length new) 0)
            (Array.push-back! &res (Insertion @new)))
          (when (> (Array.length old) 0)
            (Array.push-back! &res (Deletion @old)))
          res)
        (Array.concat
          &[(Array.concat &[
            (diff &(Array.prefix-array old sso) &(Array.prefix-array new ssn))
                  [(Eq (Array.subarray new ssn (+ ssn sl)))]])
           (diff &(Array.suffix-array old (+ sso sl))
                 &(Array.suffix-array new (+ ssn sl)))]))))

  (defn string-diff [old new]
    (diff &(String.words old) &(String.words new)))

  (defn eq? [d]
    (match @d
      (Eq _) true
      _ false))

  (defn inserted? [d]
    (match @d
      (Insertion _) true
      _ false))

  (defn deleted? [d]
    (match @d
      (Deletion _) true
      _ false))

  (defn eq [d] (Array.copy-filter &eq? d))
  (defn insertions [d] (Array.copy-filter &inserted? d))
  (defn deletions [d] (Array.copy-filter &deleted? d))
)
